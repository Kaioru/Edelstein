using System;
using System.Collections.Generic;
using Edelstein.Protocol.Gameplay.Stages.Game.Objects.User.Stats;
using Edelstein.Protocol.Network;

namespace Edelstein.Common.Gameplay.Stages.Game.Objects.User.Stats
{
    public static class SecondaryStatsOrder
    {
        public static readonly SecondaryStatType[] WriteOrderLocal =
        {
            SecondaryStatType.PAD,
            SecondaryStatType.PDD,
            SecondaryStatType.MAD,
            SecondaryStatType.MDD,
            SecondaryStatType.ACC,
            SecondaryStatType.EVA,
            SecondaryStatType.Craft,
            SecondaryStatType.Speed,
            SecondaryStatType.Jump,
            SecondaryStatType.EMHP,
            SecondaryStatType.EMMP,
            SecondaryStatType.EPAD,
            SecondaryStatType.EPDD,
            SecondaryStatType.EMDD,
            SecondaryStatType.MagicGuard,
            SecondaryStatType.DarkSight,
            SecondaryStatType.Booster,
            SecondaryStatType.PowerGuard,
            SecondaryStatType.Guard,
            SecondaryStatType.SafetyDamage,
            SecondaryStatType.SafetyAbsorb,
            SecondaryStatType.MaxHP,
            SecondaryStatType.MaxMP,
            SecondaryStatType.Invincible,
            SecondaryStatType.SoulArrow,
            SecondaryStatType.Stun,
            SecondaryStatType.Poison,
            SecondaryStatType.Seal,
            SecondaryStatType.Darkness,
            SecondaryStatType.ComboCounter,
            SecondaryStatType.WeaponCharge,
            SecondaryStatType.DragonBlood,
            SecondaryStatType.HolySymbol,
            SecondaryStatType.MesoUp,
            SecondaryStatType.ShadowPartner,
            SecondaryStatType.PickPocket,
            SecondaryStatType.MesoGuard,
            SecondaryStatType.Thaw,
            SecondaryStatType.Weakness,
            SecondaryStatType.Curse,
            SecondaryStatType.Slow,
            SecondaryStatType.Morph,
            SecondaryStatType.Ghost,
            SecondaryStatType.Regen,
            SecondaryStatType.BasicStatUp,
            SecondaryStatType.Stance,
            SecondaryStatType.SharpEyes,
            SecondaryStatType.ManaReflection,
            SecondaryStatType.Attract,
            SecondaryStatType.SpiritJavelin,
            SecondaryStatType.Infinity,
            SecondaryStatType.Holyshield,
            SecondaryStatType.HamString,
            SecondaryStatType.Blind,
            SecondaryStatType.Concentration,
            SecondaryStatType.BanMap,
            SecondaryStatType.MaxLevelBuff,
            SecondaryStatType.Barrier,
            SecondaryStatType.DojangShield,
            SecondaryStatType.ReverseInput,
            SecondaryStatType.MesoUpByItem,
            SecondaryStatType.ItemUpByItem,
            SecondaryStatType.RespectPImmune,
            SecondaryStatType.RespectMImmune,
            SecondaryStatType.DefenseAtt,
            SecondaryStatType.DefenseState,
            SecondaryStatType.DojangBerserk,
            SecondaryStatType.DojangInvincible,
            SecondaryStatType.Spark,
            SecondaryStatType.SoulMasterFinal,
            SecondaryStatType.WindBreakerFinal,
            SecondaryStatType.ElementalReset,
            SecondaryStatType.WindWalk,
            SecondaryStatType.EventRate,
            SecondaryStatType.ComboAbilityBuff,
            SecondaryStatType.ComboDrain,
            SecondaryStatType.ComboBarrier,
            SecondaryStatType.BodyPressure,
            SecondaryStatType.SmartKnockback,
            SecondaryStatType.RepeatEffect,
            SecondaryStatType.ExpBuffRate,
            SecondaryStatType.IncEffectHPPotion,
            SecondaryStatType.IncEffectMPPotion,
            SecondaryStatType.StopPortion,
            SecondaryStatType.StopMotion,
            SecondaryStatType.Fear,
            SecondaryStatType.EvanSlow,
            SecondaryStatType.MagicShield,
            SecondaryStatType.MagicResistance,
            SecondaryStatType.SoulStone,
            SecondaryStatType.Flying,
            SecondaryStatType.Frozen,
            SecondaryStatType.AssistCharge,
            SecondaryStatType.Enrage,
            SecondaryStatType.SuddenDeath,
            SecondaryStatType.NotDamaged,
            SecondaryStatType.FinalCut,
            SecondaryStatType.ThornsEffect,
            SecondaryStatType.SwallowAttackDamage,
            SecondaryStatType.MorewildDamageUp,
            SecondaryStatType.Mine,
            SecondaryStatType.Cyclone,
            SecondaryStatType.SwallowCritical,
            SecondaryStatType.SwallowMaxMP,
            SecondaryStatType.SwallowDefence,
            SecondaryStatType.SwallowEvasion,
            SecondaryStatType.Conversion,
            SecondaryStatType.Revive,
            SecondaryStatType.Sneak,
            SecondaryStatType.Mechanic,
            SecondaryStatType.Aura,
            SecondaryStatType.DarkAura,
            SecondaryStatType.BlueAura,
            SecondaryStatType.YellowAura,
            SecondaryStatType.SuperBody,
            SecondaryStatType.MorewildMaxHP,
            SecondaryStatType.Dice,
            SecondaryStatType.BlessingArmor,
            SecondaryStatType.DamR,
            SecondaryStatType.TeleportMasteryOn,
            SecondaryStatType.CombatOrders,
            SecondaryStatType.Beholder,
            SecondaryStatType.SummonBomb
        };

        internal static readonly IDictionary<SecondaryStatType, Action<ITemporaryStat, IPacketWriter>> WriteOrderRemote =
            new Dictionary<SecondaryStatType, Action<ITemporaryStat, IPacketWriter>>
            {
                {SecondaryStatType.Speed, (ts, p) => p.WriteByte((byte) ts.Value)},
                {SecondaryStatType.ComboCounter, (ts, p) => p.WriteByte((byte) ts.Value)},
                {SecondaryStatType.WeaponCharge, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.Stun, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.Darkness, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.Seal, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.Weakness, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.Curse, (ts, p) => p.WriteInt(ts.Reason)},
                {
                    SecondaryStatType.Poison, (ts, p) =>
                    {
                        p.WriteShort((short) ts.Value);
                        p.WriteInt(ts.Reason);
                    }
                },
                {SecondaryStatType.ShadowPartner, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.Morph, (ts, p) => p.WriteShort((short) ts.Value)},
                {SecondaryStatType.Ghost, (ts, p) => p.WriteShort((short) ts.Value)},
                {SecondaryStatType.Attract, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.SpiritJavelin, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.BanMap, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.Barrier, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.DojangShield, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.ReverseInput, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.RespectPImmune, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.RespectMImmune, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.DefenseAtt, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.DefenseState, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.RepeatEffect, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.StopPortion, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.StopMotion, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.Fear, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.MagicShield, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.Frozen, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.SuddenDeath, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.FinalCut, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.Cyclone, (ts, p) => p.WriteByte((byte) ts.Value)},
                {SecondaryStatType.Mechanic, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.DarkAura, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.BlueAura, (ts, p) => p.WriteInt(ts.Reason)},
                {SecondaryStatType.YellowAura, (ts, p) => p.WriteInt(ts.Reason)}
            };
    }
}
