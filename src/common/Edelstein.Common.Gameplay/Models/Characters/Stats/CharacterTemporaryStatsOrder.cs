using Edelstein.Protocol.Gameplay.Models.Characters.Stats;
using Edelstein.Protocol.Utilities.Packets;

namespace Edelstein.Common.Gameplay.Models.Characters.Stats;

internal static class CharacterTemporaryStatsOrder
{
    internal static readonly TemporaryStatType[] WriteOrderLocal =
        {
            TemporaryStatType.PAD,
            TemporaryStatType.PDD,
            TemporaryStatType.MAD,
            TemporaryStatType.MDD,
            TemporaryStatType.ACC,
            TemporaryStatType.EVA,
            TemporaryStatType.Craft,
            TemporaryStatType.Speed,
            TemporaryStatType.Jump,
            TemporaryStatType.EMHP,
            TemporaryStatType.EMMP,
            TemporaryStatType.EPAD,
            TemporaryStatType.EPDD,
            TemporaryStatType.EMDD,
            TemporaryStatType.MagicGuard,
            TemporaryStatType.DarkSight,
            TemporaryStatType.Booster,
            TemporaryStatType.PowerGuard,
            TemporaryStatType.Guard,
            TemporaryStatType.SafetyDamage,
            TemporaryStatType.SafetyAbsorb,
            TemporaryStatType.MaxHP,
            TemporaryStatType.MaxMP,
            TemporaryStatType.Invincible,
            TemporaryStatType.SoulArrow,
            TemporaryStatType.Stun,
            TemporaryStatType.Poison,
            TemporaryStatType.Seal,
            TemporaryStatType.Darkness,
            TemporaryStatType.ComboCounter,
            TemporaryStatType.WeaponCharge,
            TemporaryStatType.DragonBlood,
            TemporaryStatType.HolySymbol,
            TemporaryStatType.MesoUp,
            TemporaryStatType.ShadowPartner,
            TemporaryStatType.PickPocket,
            TemporaryStatType.MesoGuard,
            TemporaryStatType.Thaw,
            TemporaryStatType.Weakness,
            TemporaryStatType.Curse,
            TemporaryStatType.Slow,
            TemporaryStatType.Morph,
            TemporaryStatType.Ghost,
            TemporaryStatType.Regen,
            TemporaryStatType.BasicStatUp,
            TemporaryStatType.Stance,
            TemporaryStatType.SharpEyes,
            TemporaryStatType.ManaReflection,
            TemporaryStatType.Attract,
            TemporaryStatType.SpiritJavelin,
            TemporaryStatType.Infinity,
            TemporaryStatType.Holyshield,
            TemporaryStatType.HamString,
            TemporaryStatType.Blind,
            TemporaryStatType.Concentration,
            TemporaryStatType.BanMap,
            TemporaryStatType.MaxLevelBuff,
            TemporaryStatType.Barrier,
            TemporaryStatType.DojangShield,
            TemporaryStatType.ReverseInput,
            TemporaryStatType.MesoUpByItem,
            TemporaryStatType.ItemUpByItem,
            TemporaryStatType.RespectPImmune,
            TemporaryStatType.RespectMImmune,
            TemporaryStatType.DefenseAtt,
            TemporaryStatType.DefenseState,
            TemporaryStatType.DojangBerserk,
            TemporaryStatType.DojangInvincible,
            TemporaryStatType.Spark,
            TemporaryStatType.SoulMasterFinal,
            TemporaryStatType.WindBreakerFinal,
            TemporaryStatType.ElementalReset,
            TemporaryStatType.WindWalk,
            TemporaryStatType.EventRate,
            TemporaryStatType.ComboAbilityBuff,
            TemporaryStatType.ComboDrain,
            TemporaryStatType.ComboBarrier,
            TemporaryStatType.BodyPressure,
            TemporaryStatType.SmartKnockback,
            TemporaryStatType.RepeatEffect,
            TemporaryStatType.ExpBuffRate,
            TemporaryStatType.IncEffectHPPotion,
            TemporaryStatType.IncEffectMPPotion,
            TemporaryStatType.StopPortion,
            TemporaryStatType.StopMotion,
            TemporaryStatType.Fear,
            TemporaryStatType.EvanSlow,
            TemporaryStatType.MagicShield,
            TemporaryStatType.MagicResistance,
            TemporaryStatType.SoulStone,
            TemporaryStatType.Flying,
            TemporaryStatType.Frozen,
            TemporaryStatType.AssistCharge,
            TemporaryStatType.Enrage,
            TemporaryStatType.SuddenDeath,
            TemporaryStatType.NotDamaged,
            TemporaryStatType.FinalCut,
            TemporaryStatType.ThornsEffect,
            TemporaryStatType.SwallowAttackDamage,
            TemporaryStatType.MorewildDamageUp,
            TemporaryStatType.Mine,
            TemporaryStatType.Cyclone,
            TemporaryStatType.SwallowCritical,
            TemporaryStatType.SwallowMaxMP,
            TemporaryStatType.SwallowDefence,
            TemporaryStatType.SwallowEvasion,
            TemporaryStatType.Conversion,
            TemporaryStatType.Revive,
            TemporaryStatType.Sneak,
            TemporaryStatType.Mechanic,
            TemporaryStatType.Aura,
            TemporaryStatType.DarkAura,
            TemporaryStatType.BlueAura,
            TemporaryStatType.YellowAura,
            TemporaryStatType.SuperBody,
            TemporaryStatType.MorewildMaxHP,
            TemporaryStatType.Dice,
            TemporaryStatType.BlessingArmor,
            TemporaryStatType.DamR,
            TemporaryStatType.TeleportMasteryOn,
            TemporaryStatType.CombatOrders,
            TemporaryStatType.Beholder,
            TemporaryStatType.SummonBomb
        };

    internal static readonly IDictionary<TemporaryStatType, Action<ITemporaryStatRecord, IPacketWriter>> WriteOrderRemote =
        new Dictionary<TemporaryStatType, Action<ITemporaryStatRecord, IPacketWriter>>
        {
            {TemporaryStatType.Speed, (ts, p) => p.WriteByte((byte) ts.Value)},
            {TemporaryStatType.ComboCounter, (ts, p) => p.WriteByte((byte) ts.Value)},
            {TemporaryStatType.WeaponCharge, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.Stun, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.Darkness, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.Seal, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.Weakness, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.Curse, (ts, p) => p.WriteInt(ts.Reason)},
            {
                TemporaryStatType.Poison, (ts, p) =>
                {
                    p.WriteShort((short) ts.Value);
                    p.WriteInt(ts.Reason);
                }
            },
            {TemporaryStatType.ShadowPartner, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.Morph, (ts, p) => p.WriteShort((short) ts.Value)},
            {TemporaryStatType.Ghost, (ts, p) => p.WriteShort((short) ts.Value)},
            {TemporaryStatType.Attract, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.SpiritJavelin, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.BanMap, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.Barrier, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.DojangShield, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.ReverseInput, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.RespectPImmune, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.RespectMImmune, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.DefenseAtt, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.DefenseState, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.RepeatEffect, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.StopPortion, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.StopMotion, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.Fear, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.MagicShield, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.Frozen, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.SuddenDeath, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.FinalCut, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.Cyclone, (ts, p) => p.WriteByte((byte) ts.Value)},
            {TemporaryStatType.Mechanic, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.DarkAura, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.BlueAura, (ts, p) => p.WriteInt(ts.Reason)},
            {TemporaryStatType.YellowAura, (ts, p) => p.WriteInt(ts.Reason)}
        };
}
