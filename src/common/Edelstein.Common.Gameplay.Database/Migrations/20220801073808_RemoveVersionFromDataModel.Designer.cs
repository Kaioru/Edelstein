// <auto-generated />
using System;
using Edelstein.Common.Gameplay.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Edelstein.Common.Gameplay.Database.Migrations
{
    [DbContext(typeof(GameplayDbContext))]
    [Migration("20220801073808_RemoveVersionFromDataModel")]
    partial class RemoveVersionFromDataModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Edelstein.Common.Gameplay.Database.Models.AccountModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<byte?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<byte>("GradeCode")
                        .HasColumnType("smallint");

                    b.Property<short>("SubGradeCode")
                        .HasColumnType("smallint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Edelstein.Common.Gameplay.Database.Models.AccountWorldModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("WorldID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("AccountWorlds");
                });

            modelBuilder.Entity("Edelstein.Common.Gameplay.Database.Models.CharacterModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AccountWorldID")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AccountWorldID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Edelstein.Common.Gameplay.Database.Models.AccountWorldModel", b =>
                {
                    b.HasOne("Edelstein.Common.Gameplay.Database.Models.AccountModel", "Account")
                        .WithMany("AccountWorlds")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Edelstein.Common.Gameplay.Database.Models.CharacterModel", b =>
                {
                    b.HasOne("Edelstein.Common.Gameplay.Database.Models.AccountWorldModel", "AccountWorld")
                        .WithMany("Characters")
                        .HasForeignKey("AccountWorldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountWorld");
                });

            modelBuilder.Entity("Edelstein.Common.Gameplay.Database.Models.AccountModel", b =>
                {
                    b.Navigation("AccountWorlds");
                });

            modelBuilder.Entity("Edelstein.Common.Gameplay.Database.Models.AccountWorldModel", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
