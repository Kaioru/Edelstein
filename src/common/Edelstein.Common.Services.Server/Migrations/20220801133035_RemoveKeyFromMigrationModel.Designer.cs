// <auto-generated />
using System;
using Edelstein.Common.Services.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Edelstein.Common.Services.Server.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    [Migration("20220801133035_RemoveKeyFromMigrationModel")]
    partial class RemoveKeyFromMigrationModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Edelstein.Common.Services.Server.Models.MigrationModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<byte[]>("AccountBytes")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("AccountWorldBytes")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("CharacterBytes")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("DateExpire")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromServerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToServerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FromServerID");

                    b.HasIndex("ToServerID");

                    b.ToTable("Migrations");
                });

            modelBuilder.Entity("Edelstein.Common.Services.Server.Models.ServerModel", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateExpire")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Servers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Server");
                });

            modelBuilder.Entity("Edelstein.Common.Services.Server.Models.SessionModel", b =>
                {
                    b.Property<int>("ActiveAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActiveAccount"));

                    b.Property<int?>("ActiveCharacter")
                        .HasColumnType("integer");

                    b.Property<string>("ServerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ActiveAccount");

                    b.HasIndex("ServerID");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Edelstein.Common.Services.Server.Models.ServerGameModel", b =>
                {
                    b.HasBaseType("Edelstein.Common.Services.Server.Models.ServerModel");

                    b.Property<int>("ChannelID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAdultChannel")
                        .HasColumnType("boolean");

                    b.Property<int>("WorldID")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Game");
                });

            modelBuilder.Entity("Edelstein.Common.Services.Server.Models.ServerLoginModel", b =>
                {
                    b.HasBaseType("Edelstein.Common.Services.Server.Models.ServerModel");

                    b.HasDiscriminator().HasValue("Login");
                });

            modelBuilder.Entity("Edelstein.Common.Services.Server.Models.MigrationModel", b =>
                {
                    b.HasOne("Edelstein.Common.Services.Server.Models.ServerModel", "FromServer")
                        .WithMany("MigrationOut")
                        .HasForeignKey("FromServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edelstein.Common.Services.Server.Models.ServerModel", "ToServer")
                        .WithMany("MigrationIn")
                        .HasForeignKey("ToServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromServer");

                    b.Navigation("ToServer");
                });

            modelBuilder.Entity("Edelstein.Common.Services.Server.Models.SessionModel", b =>
                {
                    b.HasOne("Edelstein.Common.Services.Server.Models.ServerModel", "Server")
                        .WithMany("Sessions")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Edelstein.Common.Services.Server.Models.ServerModel", b =>
                {
                    b.Navigation("MigrationIn");

                    b.Navigation("MigrationOut");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
