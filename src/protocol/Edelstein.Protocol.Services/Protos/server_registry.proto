syntax = "proto3";

package edelstein.protocol.services.contracts;

enum ServerRegistryResult {
  SERVER_REGISTRY_RESULT_UNSPECIFIED = 0;
  SERVER_REGISTRY_RESULT_OK = 1;
  SERVER_REGISTRY_RESULT_FAILED_UNKNOWN = 2;
  SERVER_REGISTRY_RESULT_FAILED_NOT_REGISTERED = 3;
  SERVER_REGISTRY_RESULT_FAILED_ALREADY_REGISTERED = 4;
}

message ServerContract {
  string id = 1;

  string host = 2;
  int32 port = 3;

  map<string, string> metadata = 4;
}

message RegisterServerRequest { ServerContract server = 1; }
message RegisterServerResponse { ServerRegistryResult result = 1; }

message DeregisterServerRequest { string id = 1; }
message DeregisterServerResponse { ServerRegistryResult result = 1; }

message UpdateServerRequest { ServerContract server = 1; }
message UpdateServerResponse { ServerRegistryResult result = 1; }

message DescribeServerByIDRequest { string id = 1; }
message DescribeServerByIDResponse {
  ServerRegistryResult result = 1;
  ServerContract server = 2;
}

message DescribeServerByMetadataRequest { map<string, string> metadata = 1; }
message DescribeServerByMetadataResponse { repeated ServerContract servers = 1; }