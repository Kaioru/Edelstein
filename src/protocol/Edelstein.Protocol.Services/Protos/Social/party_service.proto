syntax = "proto3";

package edelstein.protocol.services.contracts.social;

enum PartyServiceResult {
  PARTY_SERVICE_RESULT_UNSPECIFIED = 0;
  PARTY_SERVICE_RESULT_OK = 1;
  PARTY_SERVICE_RESULT_FAILED_UNKNOWN = 2;
  PARTY_SERVICE_RESULT_FAILED_TIMEOUT = 3;
  PARTY_SERVICE_RESULT_FAILED_ALREADY_IN_PARTY = 4;
  PARTY_SERVICE_RESULT_FAILED_NOT_IN_PARTY = 5;
  PARTY_SERVICE_RESULT_FAILED_NON_EXISTENT_PARTY = 6;
  PARTY_SERVICE_RESULT_FAILED_FULL_PARTY = 7;
  PARTY_SERVICE_RESULT_FAILED_ALREADY_BOSS = 8;
}

message PartyContract {
  int32 id = 1;
  int32 boss = 2;
  repeated PartyMemberContract members = 3;
}

message PartyMemberContract {
  int32 id = 1;
  string name = 2;
  int32 job = 3;
  int32 level = 4;
  int32 channel = 5;
  int32 field = 6;
}

message PartyLoadByIDRequest { int32 id = 1; }
message PartyLoadByIDResponse {
  PartyServiceResult result = 1;
  PartyContract party = 2;
}

message PartyLoadByCharacterRequest { int32 character = 1; }
message PartyLoadByCharacterResponse {
  PartyServiceResult result = 1;
  PartyContract party = 2;
}

message PartyCreateRequest { PartyMemberContract member = 1; }
message PartyCreateResponse {
  PartyServiceResult result = 1;
  PartyContract party = 2;
}

message PartyWithdrawRequest {
  int32 character = 1;
  bool is_kick = 2;
}
message PartyWithdrawResponse { PartyServiceResult result = 1; }

message PartyJoinRequest {
  int32 party = 1;
  PartyMemberContract member = 2;
}
message PartyJoinResponse {
  PartyServiceResult result = 1;
  PartyContract party = 2;
}

message PartyChangeBossRequest {
  int32 character = 1; 
  bool is_disconnect = 2;
}
message PartyChangeBossResponse { PartyServiceResult result = 1; }

message PartyUpdateChangeLevelOrJobRequest {
  int32 character = 1;
  int32 level = 2;
  int32 job = 3;
}
message PartyUpdateChangeLevelOrJobResponse { PartyServiceResult result = 1; }

message PartyUpdateUserMigrationRequest {
  int32 character = 1;
  int32 channel = 2;
  int32 field = 3;
}
message PartyUpdateUserMigrationResponse { PartyServiceResult result = 1; }

message PartyUpdateContract {
  PartyContract party = 1;
}