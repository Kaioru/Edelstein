syntax = "proto3";

package edelstein.protocol.interop.contracts;

message ServerObject {
    string id = 1;
    ServerConnectionObject serverConnection = 2;
    map<string, string> tags = 3;
}

message ServerConnectionObject {
    string host = 1;
    int32 port = 2;
}

enum ServiceRegistryResult {
    OK = 0;
    FAILED = 1;
}

message ServiceRegistryResponse {
    ServiceRegistryResult result = 1;
}

message RegisterServerRequest {
    ServerObject server = 1;
}

message DeregisterServerRequest {
    string id = 1;
}

message UpdateServerRequest {
    ServerObject server = 1;
}

message DescribeServerRequest {
    string id = 1;
}

message DescribeServerResponse {
    ServiceRegistryResult result = 1;
    optional ServerObject server = 2;
}

message DescribeServersRequest {
    map<string, string> tags = 1;
}

message DescribeServersResponse {
    ServiceRegistryResult result = 1;
    repeated ServerObject servers = 2;
}